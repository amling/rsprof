#!/usr/bin/env perl

$| = 1;

use strict;
use warnings;

use JSON;

my $json = JSON::XS->new();
$json->allow_nonref(1);
$json->allow_blessed(1);
$json->convert_blessed(1);

my $time = undef;
my $name = undef;
my $state = undef;
my @stack;
while(<>) {
    chomp;

    # tolerate certain whitespace damage
    s/\s*$//;

    if(/^\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d$/) {
        $time = $_;
    }
    if(/^"(.*)"/) {
        $name = $1;
    }
    if(/^ *[^ ]*Thread\.State: ([^ ]*)/) {
        $state = $1;
    }
    if(/^	(.*)$/) {
        my $elt = $1;
        if($elt =~ /at (.*)\((.*)\)/)
        {
            my $meth = $1;
            my $src = $2;

            if($src =~ /:([0-9]+)$/) {
                $meth = "$meth:L$1";
            }

            push @stack, $meth;
        }
    }
    # broke-ass formatting of proguard deobfuscator
    if(/^     +([a-zA-Z]*)$/) {
        my $alt = $1;
        my $elt = pop @stack;
        $elt =~ s/((?::L[0-9]*)?)$/|$alt$1/;
        push @stack, $elt;
    }
    if(/^$/) {
        flush();
    }
}
flush();

sub flush {
    if(defined($name)) {
        @stack = reverse @stack;
        my $r = {
            'time' => $time,
            'name' => $name,
            'state' => $state,
            'path' => join("/", @stack),
        };
        print $json->encode($r) . "\n";
        @stack = ();
        $name = undef;
    }
}
